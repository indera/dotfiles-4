" Vundle
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
  " it's needed
  Plugin 'gmarik/Vundle.vim'

  Plugin 'chriskempson/base16-vim'
  Plugin 'christoomey/vim-tmux-navigator'
  Plugin 'daviesjamie/vim-base16-lightline'
  Plugin 'edkolev/tmuxline.vim'
  Plugin 'itchyny/lightline.vim'
  Plugin 'kien/ctrlp.vim'
  Plugin 'mattn/emmet-vim'
  Plugin 'ntpeters/vim-better-whitespace'
  Plugin 'rking/ag.vim'
  Plugin 'scrooloose/nerdtree'
  Plugin 'sheerun/vim-polyglot'
  Plugin 'sjl/gundo.vim'
  Plugin 'tpope/vim-abolish' " for searching and replacing patterns easily
  Plugin 'tpope/vim-commentary'
  Plugin 'tpope/vim-dispatch'
  Plugin 'tpope/vim-endwise'
  Plugin 'tpope/vim-fugitive'
  Plugin 'tpope/vim-surround' " for delimiters changing
  Plugin 'tpope/vim-unimpaired'

call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" vim basic config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  let mapleader = ","

  set autoindent
  set colorcolumn=81
  set cul
  set expandtab
  set hlsearch
  set ignorecase
  set laststatus=2
  set nobackup
  set noshowmode
  set noswapfile
  set nowrap
  set nowritebackup
  set shell=/bin/zsh
  set shiftwidth=2
  set showtabline=2
  set smartindent
  set smarttab
  set softtabstop=2
  set splitbelow
  set splitright
  set tabstop=2

  hi ColorColumn term=bold ctermfg=8 ctermbg=18 guibg=18

  syntax on

  map <up> <nop>
  map <down> <nop>
  map <left> <nop>
  map <right> <nop>
  imap <up> <nop>
  imap <down> <nop>
  imap <left> <nop>
  imap <right> <nop>

  cab W! w!
  cab W w
  cab Wa wa
  cab Wq wq
  cab wQ wq
  cab WQ wq
  cab Q! q!
  cab Q q
  cab E e
  cab E! e!

  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd BufWritePre * :StripWhitespace
  augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cul
    autocmd WinLeave * set nocul
  augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" plugins config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " lightline.vim
    let g:lightline = {
          \   'colorscheme': 'base16',
          \   'active': {
          \     'left': [
          \       ['mode', 'paste'], ['fugitive', 'filename'], ['ctrlpmark']
          \     ],
          \     'right': [
          \       ['lineinfo'], ['percent'],
          \       ['fileformat', 'fileencoding', 'filetype']
          \     ]
          \   },
          \   'component_function': {
          \     'fugitive': 'LightLineFugitive',
          \     'filename': 'LightLineFilename',
          \     'fileformat': 'LightLineFileformat',
          \     'filetype': 'LightLineFiletype',
          \     'fileencoding': 'LightLineFileencoding',
          \     'mode': 'LightLineMode',
            \   'ctrlpmark': 'CtrlPMark',
          \   },
          \   'subseparator': { 'left': '|', 'right': '|' }
          \ }

    function! LightLineModified()
      return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
      return &ft !~? 'help' && &readonly ? 'RO' : ''
    endfunction

    function! LightLineFilename()
      let fname = expand('%:t')
      return fname == 'ControlP' ? g:lightline.ctrlp_item :
            \ fname =~ '__Gundo\|NERD_tree\|YankRing' ? '' :
            \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
            \ ('' != fname ? fname : '[No Name]') .
            \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFugitive()
      try
        if expand('%:t') !~? 'Gundo\|NERD\|YankRing' && exists('*fugitive#head')
          let mark = ''  " edit here for cool mark
          let _ = fugitive#head()
          return strlen(_) ? mark._ : ''
        endif
      catch
      endtry
      return ''
    endfunction

    function! LightLineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
      return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
      let fname = expand('%:t')
      return fname == '__Gundo__' ? 'Gundo' :
            \ fname == 'ControlP' ? 'CtrlP' :
            \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
            \ fname =~ 'NERD_tree' ? 'NERDTree' :
            \ fname =~ 'YankRing' ? 'YankRing' :
            \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    function! CtrlPMark()
      if expand('%:t') =~ 'ControlP'
        call lightline#link('iR'[g:lightline.ctrlp_regex])
        return lightline#concatenate([g:lightline.ctrlp_next, g:lightline.ctrlp_prev], 0)
      else
        return ''
      endif
    endfunction

    let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2',
      \ }

    function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
      let g:lightline.ctrlp_regex = a:regex
      let g:lightline.ctrlp_prev = a:prev
      let g:lightline.ctrlp_item = a:item
      let g:lightline.ctrlp_next = a:next
      return lightline#statusline(0)
    endfunction

    function! CtrlPStatusFunc_2(str)
      return lightline#statusline(0)
    endfunction

  " gundo.vim
    map <Leader>u :GundoToggle<CR>
    let g:gundo_close_on_revert = 1

  " nerdtree
    nmap <Leader>o :NERDTreeToggle<CR>
    nmap <Leader>f :NERDTreeFind<CR>
    let NERDTreeQuitOnOpen = 1
    let NERDTreeShowHidden = 1
    let NERDTreeShowLineNumbers = 0
    let NERDTreeWinSize = 51

  " base16-vim
    set t_Co=256
    let base16colorspace=256  " Access colors present in 256 colorspace
    set background=dark
    colorscheme $VIM_COLORSCHEME

  " vim-dispatch
    nmap <Leader>dd :Dispatch
    nmap <Leader>ds :Start
    nmap <Leader>df :FocusDispatch

  " ctrlp
    let g:ctrlp_map = '<Leader>t'
    " Use ag because it's lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden'.
          \  ' --ignore .git '.
          \  ' --ignore _build'.
          \  ' -g ""'
    let g:ctrlp_use_caching = 0 " ag is fast enough so cache isn't needed
    let g:ctrlp_prompt_mappings = {
          \   'PrtSelectMove("j")':   ['<c-j>'],
          \   'PrtSelectMove("k")':   ['<c-k>'],
          \   'PrtHistory(-1)':       ['<down>'],
          \   'PrtHistory(1)':        ['<up>'],
          \   'ToggleType(1)':        ['<c-l>'],
          \   'ToggleType(-1)':       ['<c-h>'],
          \   'PrtCurLeft()':         ['<left>', '<c-^>'],
          \   'PrtCurRight()':        ['<right>'],
          \   'PrtExit()':            ['<esc>', '<c-c>', '<c-g>', '<c-p>'],
          \ }
    " let g:ctrlp_root_markers = ['.gitignore']
